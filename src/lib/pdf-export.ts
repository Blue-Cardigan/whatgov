import jsPDF from 'jspdf';
import { format } from 'date-fns';
import { processCitations, constructHansardUrl } from '@/lib/openai-api';
import createClient from '@/lib/supabase/client';

interface ExportToPDFParams {
  title: string;
  content: string;
  citations: string[];
  date: Date;
}

const ensureFullUrl = (url: string) => {
  if (!url) return '';
  if (url.startsWith('http')) return url;
  return `https://whatgov.co.uk${url.startsWith('/') ? '' : '/'}${url}`;
};

const fitUrlToWidth = (doc: jsPDF, url: string, maxWidth: number, startX: number) => {
  // Start with normal size
  doc.setFontSize(10);
  let textWidth = doc.getTextWidth(url);
  
  // If URL is too long, reduce font size until it fits
  let fontSize = 10;
  while (textWidth + startX > maxWidth && fontSize > 6) {
    fontSize -= 0.5;
    doc.setFontSize(fontSize);
    textWidth = doc.getTextWidth(url);
  }
  
  return fontSize;
};

export async function exportToPDF({ 
  title, 
  content, 
  citations, 
  date 
}: ExportToPDFParams) {
  // Initialize PDF with better default settings
  const doc = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4'
  });

  // Define consistent measurements
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  const margin = {
    top: 25,
    bottom: 25,
    left: 25,
    right: 25
  };
  const contentWidth = pageWidth - margin.left - margin.right;
  let yPosition = margin.top;

  // Add header with logo or watermark
  doc.setFillColor(247, 247, 247);
  doc.rect(0, 0, pageWidth, 15, 'F');
  doc.setFontSize(8);
  doc.setTextColor(128, 128, 128);
  doc.text('Generated by WhatGov.co.uk', margin.left, 10);
  doc.text(format(date, 'PPP'), pageWidth - margin.right, 10, { align: 'right' });
  
  // Add title with better typography
  doc.setFontSize(24);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(33, 33, 33);
  const titleLines = doc.splitTextToSize(title, contentWidth);
  doc.text(titleLines, margin.left, yPosition);
  yPosition += titleLines.length * 12;

  // Add divider
  yPosition += 5;
  doc.setDrawColor(200, 200, 200);
  doc.line(margin.left, yPosition, pageWidth - margin.right, yPosition);
  yPosition += 10;

  // Add content with improved readability
  doc.setFontSize(11);
  doc.setFont('helvetica', 'normal');
  doc.setTextColor(51, 51, 51);
  const contentLines = doc.splitTextToSize(content, contentWidth);
  doc.text(contentLines, margin.left, yPosition);
  yPosition += contentLines.length * 6 + 15;

  // Add citations if they exist
  if (citations.length > 0) {
    // Citations header
    doc.addPage();
    yPosition = margin.top;
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.setTextColor(33, 33, 33);
    doc.text('Sources', margin.left, yPosition);
    yPosition += 10;

    // Add divider under Sources header
    doc.setDrawColor(200, 200, 200);
    doc.line(margin.left, yPosition, pageWidth - margin.right, yPosition);
    yPosition += 10;

    const supabase = createClient();
    const extIds = citations.map(citation => {
      const match = citation.match(/\[(\d+)\]\s+(.+?)\.txt$/);
      return match ? match[2] : null;
    }).filter(Boolean);

    const { data: debates } = await supabase
      .from('debates_new')
      .select('ext_id, date, title, type, house, analysis, speaker_points')
      .in('ext_id', extIds);

    const debateMap = new Map(debates?.map(d => [d.ext_id, d]));
    const { citationLinks } = processCitations('', citations);

    // Process each citation with better formatting
    for (const citation of citations) {
      const match = citation.match(/\[(\d+)\]\s+(.+?)\.txt$/);
      if (!match) continue;
      
      const [index, extId] = match;
      const debate = debateMap.get(extId);
      
      if (debate) {
        // Check if we need a new page
        if (yPosition + 40 > pageHeight - margin.bottom) {
          doc.addPage();
          yPosition = margin.top;
        }

        // Citation number and title
        doc.setFontSize(14);
        doc.setFont('helvetica', 'bold');
        doc.setTextColor(33, 33, 33);
        const citationText = `[${index}] ${debate.title}`;
        const citationLines = doc.splitTextToSize(citationText, contentWidth);
        doc.text(citationLines, margin.left, yPosition);
        yPosition += citationLines.length * 7 + 5;

        // Date of debate
        doc.setFontSize(10);
        doc.setFont('helvetica', 'normal');
        doc.setTextColor(128, 128, 128);
        doc.text(
          format(new Date(debate.date), 'PPPP'),
          margin.left, 
          yPosition
        );
        yPosition += 8;

        // Links with icons or bullets
        doc.setTextColor(0, 102, 204);

        // Hansard link
        const hansardUrl = constructHansardUrl(
          debate.ext_id,
          debate.title,
          format(new Date(debate.date), 'yyyy-MM-dd')
        );
        const labelX = margin.left + 35; // X position where URL starts
        
        doc.setFontSize(10);
        doc.text('• Official Transcript:', margin.left, yPosition);
        
        // Fit Hansard URL
        const hansardFontSize = fitUrlToWidth(
          doc, 
          hansardUrl, 
          pageWidth - margin.right, 
          labelX
        );
        doc.setFontSize(hansardFontSize);
        doc.text(hansardUrl, labelX, yPosition);
        yPosition += 6;

        // WhatGov link
        const whatGovUrl = ensureFullUrl(
          citationLinks.find(link => 
            link.index === Number(index)
          )?.url || ''
        );
        
        doc.setFontSize(10);
        doc.text('• Full Analysis:', margin.left, yPosition);
        
        // Fit WhatGov URL
        const whatGovFontSize = fitUrlToWidth(
          doc, 
          whatGovUrl, 
          pageWidth - margin.right, 
          labelX
        );
        doc.setFontSize(whatGovFontSize);
        doc.text(whatGovUrl, labelX, yPosition);
        yPosition += 15;
      }
    }
  }

  // Add footer with page numbers
  const pageCount = doc.internal.pages.length;
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(128, 128, 128);
    doc.text(
      `Page ${i} of ${pageCount}`,
      pageWidth / 2,
      pageHeight - 10,
      { align: 'center' }
    );
  }
  
  // Save the PDF with formatted filename
  const filename = `${title.slice(0, 30).replace(/[^a-z0-9]/gi, '_').toLowerCase()}_${format(date, 'yyyy-MM-dd')}.pdf`;
  doc.save(filename);
} 